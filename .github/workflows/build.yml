name: "Build latest images & releases"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  Check-version:
    runs-on: ubuntu-latest
    name: "Check version"
    outputs:
      latest_now: ${{ steps.get-version.outputs.latest_now }}
      latest_new: ${{ steps.get-version.outputs.latest_new }}
      latest_renew: ${{ steps.get-version.outputs.latest_renew }}
      commit: ${{ steps.get-version.outputs.commit }}
      go_version: ${{ steps.get-version.outputs.go_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Check version
        id: get-version
        run: |
          LATEST_NOW=$(awk '/latest/{print $NF; exit}' README.md)
          LATEST_NEW=$(curl -s 'https://api.github.com/repos/XTLS/Xray-core/releases' | jq -r '.[0].tag_name')
          GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | awk 'NR==1' | sed 's/^go//')

          echo "LATEST_NOW: $LATEST_NOW"
          echo "LATEST_NEW: $LATEST_NEW"
          echo "GO_VERSION: $GO_VERSION"
          
          LATEST_RENEW=0
          if [ "$LATEST_NOW" != "$LATEST_NEW" ]; then
            LATEST_RENEW=1
            DATE=$(date "+%Y/%m/%d")
            COMMIT="Build to $LATEST_NEW by Github Actions, $DATE"
            echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          fi

          {
            echo "latest_now=$LATEST_NOW"
            echo "latest_new=$LATEST_NEW"
            echo "latest_renew=$LATEST_RENEW"
            echo "go_version=$GO_VERSION"
          } >> $GITHUB_OUTPUT
  
  Build-and-release:
    needs: Check-version
    if: ${{ needs.Check-version.outputs.latest_renew == '1' }}
    runs-on: ubuntu-latest
    name: "Build and release"
    env:
      LATEST_NOW: ${{ needs.Check-version.outputs.latest_now }}
      LATEST_NEW: ${{ needs.Check-version.outputs.latest_new }}
      GO_VERSION: ${{ needs.Check-version.outputs.go_version }}
      COMMIT: ${{ needs.Check-version.outputs.commit }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKERHUB_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      BINARY: xray
      CGO_ENABLED: 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      # # Create GitHub release      
      # - name: Create latest release
      #   uses: shogo82148/actions-create-release@v1.6.0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.LATEST_NEW }}
      #     release_name: ${{ env.LATEST_NEW }}
      #     draft: false
      #     prerelease: false
      #     overwrite: true

      # Docker image build setup      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          buildkitd-flags: --debug
      
      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Build and push Docker image with caching      
      - name: Push images to Docker hub
        uses: docker/build-push-action@v5.1.0
        with:
          push: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64,linux/riscv64
          build-args: BRANCH=${{ env.LATEST_NEW }}
          tags: |
            ${{ env.DOCKERHUB_REPOSITORY }}:latest
            ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.LATEST_NEW }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Update README with new version And Commit changes    
      - name: Update README and commit
        run: |
          sed -i "s/\(latest.*:\).*/\1 ${{ env.LATEST_NEW }}/" README.md
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add README.md
          git commit -m "${{ env.COMMIT }}"
          git push origin HEAD:main --force

      # Clean up old workflow runs      
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 3
          delete_run_by_conclusion_pattern: "cancelled,skipped,success"
  
  Build-releases:
    needs: Check-version
    if: ${{ needs.Check-version.outputs.latest_renew == '1' }}
    runs-on: ubuntu-latest
    name: "Build binary releases"
    env:
      LATEST_NEW: ${{ needs.Check-version.outputs.latest_new }}
      GO_VERSION: ${{ needs.Check-version.outputs.go_version }}
      BINARY: xray
      CGO_ENABLED: 0
    
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: "386"
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm
            goarm: "7"
          - goos: linux
            goarch: arm
            goarm: "6"
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          # Windows builds
          - goos: windows
            goarch: "386"
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          # macOS builds (no 386 or arm)
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          # FreeBSD builds
          - goos: freebsd
            goarch: amd64
          - goos: freebsd
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      
      # Setup Go with caching
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Git clone repository
        uses: actions/checkout@v4
        with:
          repository: "XTLS/Xray-core"
          ref: "${{ env.LATEST_NEW }}"
          fetch-depth: 1
          path: xray-core
          
      - name: Set asset name
        run: |
          if [ -n "${{ matrix.goarm }}" ]; then
            echo "ASSET_NAME=${{ env.BINARY }}-${{ matrix.goos }}-${{ matrix.goarch }}-v${{ matrix.goarm }}" >> $GITHUB_ENV
          else
            echo "ASSET_NAME=${{ env.BINARY }}-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_ENV
          fi
          
      - name: Build latest releases
        uses: fscarmen/go-release-action@v1.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goarm: ${{ matrix.goarm }}
          goversion: ${{ env.GO_VERSION }}
          project_path: "./xray-core/main"
          binary_name: "${{ env.BINARY }}"
          build_flags: "-trimpath"
          ldflags: -s -w -buildid=
          md5sum: "false"
          release_tag: "${{ env.LATEST_NEW }}"
          release_name: "${{ env.LATEST_NEW }}"
          compress_assets: "true"
          create_release: true
          overwrite: true
        # asset_name: "${{ env.BINARY }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm != '' && format('-v{0}', matrix.goarm) || '' }}"
          asset_name: "${{ env.ASSET_NAME }}"
